diff --git a/vm/mterp/out/InterpAsm-armv7-a.S b/vm/mterp/out/InterpAsm-armv7-a.S
index 9ce376e..5e20a56 100644
--- a/vm/mterp/out/InterpAsm-armv7-a.S
+++ b/vm/mterp/out/InterpAsm-armv7-a.S
@@ -333,7 +333,6 @@ dvmMterpStdRun:
 
 .Lbad_arg:
     ldr     r0, strBadEntryPoint
-0:  add     r0, pc
     @ r1 holds value of entryPoint
     bl      printf
     bl      dvmAbort
@@ -341,7 +340,7 @@ dvmMterpStdRun:
     .size   dvmMterpStdRun, .-dvmMterpStdRun
 
 strBadEntryPoint:
-    .word   PCREL_REF(.LstrBadEntryPoint,0b)
+    .word   .LstrBadEntryPoint
 
     .global dvmMterpStdBail
     .type   dvmMterpStdBail, %function
@@ -8010,7 +8009,6 @@ dvmAsmSisterStart:
      */
 .LOP_FILLED_NEW_ARRAY_notimpl:
     ldr     r0, .L_strFilledNewArrayNotImpl_OP_FILLED_NEW_ARRAY
-3:  add     r0, pc
     bl      dvmThrowInternalError
     b       common_exceptionThrown
 
@@ -8020,7 +8018,7 @@ dvmAsmSisterStart:
      */
 
 .L_strFilledNewArrayNotImpl_OP_FILLED_NEW_ARRAY:
-    .word   PCREL_REF(.LstrFilledNewArrayNotImpl,3b)
+    .word   .LstrFilledNewArrayNotImpl
 
 /* continuation for OP_FILLED_NEW_ARRAY_RANGE */
 
@@ -8095,7 +8093,6 @@ dvmAsmSisterStart:
      */
 .LOP_FILLED_NEW_ARRAY_RANGE_notimpl:
     ldr     r0, .L_strFilledNewArrayNotImpl_OP_FILLED_NEW_ARRAY_RANGE
-3:  add     r0, pc
     bl      dvmThrowInternalError
     b       common_exceptionThrown
 
@@ -8105,7 +8102,7 @@ dvmAsmSisterStart:
      */
 
 .L_strFilledNewArrayNotImpl_OP_FILLED_NEW_ARRAY_RANGE:
-    .word   PCREL_REF(.LstrFilledNewArrayNotImpl,3b)
+    .word   .LstrFilledNewArrayNotImpl
 
 /* continuation for OP_CMPL_FLOAT */
 .LOP_CMPL_FLOAT_finish:
@@ -9467,7 +9464,6 @@ d2l_doconv:
     ldr     r0, [rFP, ip, lsl #2]       @ r0<- vC
 0:
     ldr     rINST, .LOP_EXECUTE_INLINE_table    @ table of InlineOperation
-5:  add     rINST, pc
     ldr     pc, [rINST, r10, lsl #4]    @ sizeof=16, "func" is first entry
     @ (not reached)
 
@@ -9503,7 +9499,7 @@ d2l_doconv:
 
 
 .LOP_EXECUTE_INLINE_table:
-    .word   PCREL_REF(gDvmInlineOpsTable,5b)
+    .word   gDvmInlineOpsTable
 
 /* continuation for OP_EXECUTE_INLINE_RANGE */
 
@@ -9528,7 +9524,6 @@ d2l_doconv:
     GET_VREG(r0, ip)                    @ r0<- vBase[0]
 0:
     ldr     r9, .LOP_EXECUTE_INLINE_RANGE_table       @ table of InlineOperation
-5:  add     r9, pc
     ldr     pc, [r9, r10, lsl #4]       @ sizeof=16, "func" is first entry
     @ (not reached)
 
@@ -9566,7 +9561,7 @@ d2l_doconv:
 
 
 .LOP_EXECUTE_INLINE_RANGE_table:
-    .word   PCREL_REF(gDvmInlineOpsTable,5b)
+    .word   gDvmInlineOpsTable
 
 
 /* continuation for OP_INVOKE_OBJECT_INIT_RANGE */
@@ -16511,9 +16506,7 @@ common_exceptionThrown:
     ldr     r3, [r3, #offClassObject_descriptor]
     @
     ldr     r2, strExceptionNotCaughtLocally
-0:  add     r2, pc
     ldr     r1, strLogTag
-1:  add     r1, pc
     mov     r0, #3                      @ LOG_DEBUG
     bl      __android_log_print
 #endif
@@ -16524,9 +16517,9 @@ common_exceptionThrown:
     b       common_gotoBail             @ bail out
 
 strExceptionNotCaughtLocally:
-    .word   PCREL_REF(.LstrExceptionNotCaughtLocally,0b)
+    .word   .LstrExceptionNotCaughtLocally
 strLogTag:
-    .word   PCREL_REF(.LstrLogTag,1b)
+    .word   .LstrLogTag
 
     /*
      * Exception handling, calls through "glue code".
@@ -16594,12 +16587,11 @@ common_errArrayIndex:
 common_errDivideByZero:
     EXPORT_PC()
     ldr     r0, strDivideByZero
-0:  add     r0, pc
     bl      dvmThrowArithmeticException
     b       common_exceptionThrown
 
 strDivideByZero:
-    .word   PCREL_REF(.LstrDivideByZero,0b)
+    .word   .LstrDivideByZero
 
 /*
  * Attempt to allocate an array with a negative size.
@@ -16650,14 +16642,13 @@ common_abort:
 common_squeak\num:
     stmfd   sp!, {r0, r1, r2, r3, ip, lr}
     ldr     r0, strSqueak\num
-0:  add     r0, pc
     mov     r1, #\num
     bl      printf
     ldmfd   sp!, {r0, r1, r2, r3, ip, lr}
     bx      lr
 
 strSqueak\num:
-    .word   PCREL_REF(.LstrSqueak,0b)
+    .word   .LstrSqueak
     .endm
 
     SQUEAK  0
@@ -16674,13 +16665,12 @@ common_printNum:
     stmfd   sp!, {r0, r1, r2, r3, ip, lr}
     mov     r1, r0
     ldr     r0, strSqueak
-0:  add     r0, pc
     bl      printf
     ldmfd   sp!, {r0, r1, r2, r3, ip, lr}
     bx      lr
 
 strSqueak:
-    .word   PCREL_REF(.LstrSqueak,0b)
+    .word   .LstrSqueak
 
 /*
  * Print a newline, preserving registers.
@@ -16688,13 +16678,12 @@ strSqueak:
 common_printNewline:
     stmfd   sp!, {r0, r1, r2, r3, ip, lr}
     ldr     r0, strNewline
-0:  add     r0, pc
     bl      printf
     ldmfd   sp!, {r0, r1, r2, r3, ip, lr}
     bx      lr
 
 strNewline:
-    .word   PCREL_REF(.LstrNewline,0b)
+    .word   .LstrNewline
 
     /*
      * Print the 32-bit quantity in r0 as a hex value, preserving registers.
@@ -16703,13 +16692,12 @@ common_printHex:
     stmfd   sp!, {r0, r1, r2, r3, ip, lr}
     mov     r1, r0
     ldr     r0, strPrintHex
-0:  add     r0, pc
     bl      printf
     ldmfd   sp!, {r0, r1, r2, r3, ip, lr}
     bx      lr
 
 strPrintHex:
-    .word   PCREL_REF(.LstrPrintHex,0b)
+    .word   .LstrPrintHex
 
 /*
  * Print the 64-bit quantity in r0-r1, preserving registers.
@@ -16719,13 +16707,12 @@ common_printLong:
     mov     r3, r1
     mov     r2, r0
     ldr     r0, strPrintLong
-0:  add     r0, pc
     bl      printf
     ldmfd   sp!, {r0, r1, r2, r3, ip, lr}
     bx      lr
 
 strPrintLong:
-    .word   PCREL_REF(.LstrPrintLong,0b)
+    .word   .LstrPrintLong
 
 /*
  * Print full method info.  Pass the Method* in r0.  Preserves regs.
