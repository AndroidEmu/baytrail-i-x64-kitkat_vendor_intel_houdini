#!/bin/bash
#
# Patch source ISA binary with glue wrapper.
# Patch library symtab
#
# This script is supposed to be invoked from Android.mk.
# Do NOT to execute this script directly.
#

if [[ $1 = "pfb" ]]; then
    library_original=$2     # Args 1: prebuilt library
    library_glue=$3         # Args 2: glue library
    library_symbol=$4       # Args 3: symbol file
    intermediate_path=$5    # Args 4: intermediate path
    uname_tag=$6            # Args 5: platform uname
elif [[ $1 = "pst" ]]; then
    library_original=$2     # Args 1: prebuilt library
    library_symbol=$3       # Args 2: symbol file
    intermediate_path=$4    # Args 3: intermediate path
    uname_tag=$5            # Args 4: platform uname
else
    echo "Wrong parameter!"
    echo "$1,$2,$3,$4,$5"
    exit -1;
fi

# System's PREBUILT_TAG
uname=$uname_tag

setup_uname() {
    if [[ -z $uname ]]; then
        uname=$(uname -sm)
        if expr match "$uname" Darwin > /dev/null; then
            if expr match "$uname" i386 > /dev/null; then
                uname="darwin-x86";
            else
                uname="darwin-ppc";
            fi
        elif expr match "$uname" Linux > /dev/null; then
            uname="linux-x86"
        else
            echo "Unknown OS: try linux-x86";
            uname="linux-x86";
        fi
    fi
}

setup_toolchain() {
    if which arm-eabi-objdump > /dev/null; then
        objdump_cmd=arm-eabi-objdump
    else
        if [[ -z "$ANDROID_BUILD_TOP" ]]; then
            echo "Error: env ANDROID_BUILD_TOP not set. Please run envsetup.sh and lunch first!";
            exit -1
        fi

        toolchain_prefix=$ANDROID_BUILD_TOP/prebuilts/gcc/$uname/arm/arm-eabi-4.6/bin/
        objdump_cmd=$toolchain_prefix/arm-eabi-objdump
    fi
}

setup_pams() {
    if which pams > /dev/null ; then
        pams_cmd=pams
    else
        if [[ -z "$ANDROID_HOST_OUT" ]]; then
            echo "Error: env ANDROID_HOST_OUT not set. Please envsetup.sh and lunch first!";
            exit -1
        fi

        pams_prefix=$ANDROID_HOST_OUT/bin
        pams_cmd=$pams_prefix/pams
    fi
}

symbol_to_addr() {
    local library=$1
    local symbol=$2

    if [[ "x$library" = "x" ]] || [[ "x$symbol" = "x" ]]; then
        echo "Wrong argument: library ($library), symbol ($symbol)!";
        exit -1;
    fi

    local symbol_info=$($objdump_cmd -T $library | grep -w $symbol)
    local symbol_offset=${symbol_info%%[ 	]*}

    echo $symbol_offset;
}

symbol_size() {
    local library=$1
    local symbol=$2

    if [[ "x$library" = "x" ]] || [[ "x$symbol" = "x" ]]; then
        echo "Wrong argument: library ($library), symbol ($symbol)!";
        exit -1;
    fi

    local symbol_size=$($objdump_cmd -T $library | grep -w $symbol | awk '{ print $(NF-1) }' )

    echo $(( 0x$symbol_size + 0 ));
}

#
# Setup environment
setup_uname
setup_toolchain
setup_pams

#
# Valiate arguments
if [[ ! -f "$library_original" ]]; then
    echo "Error: lib_orig ($library_original) does not exist!";
    exit -1;
fi

if [[ ! -d "$intermediate_path" ]]; then
    echo "Error: intermediate folder ($intermediate_path) does not exist!";
    exit -1;
fi

if [[ $1 = "pfb" ]]; then
    if [[ ! -f "$library_glue" ]]; then
        echo "Error: lib_glue ($library_glue) does not exist!";
        exit -1;
    fi

    if [[ -f "$library_symbol" ]]; then
        direct_copy="no"
    else
        direct_copy="yes"
    fi

    #
    # Copy oringal library to intermediate folder
    cp -fp $library_original $intermediate_path/

    #
    # Patch library with glue wrapper
    if [[ "$direct_copy" != "yes" ]]; then
        while read symbol; do
            dest_library=$intermediate_path/$(basename $library_original)
            dest_offset=$(symbol_to_addr $dest_library $symbol)

            src_library=$library_glue
            src_offset=$(symbol_to_addr $src_library $symbol)

            sym_size=$(symbol_size $dest_library $symbol)
            if [[ $sym_size -lt 4 ]]; then
                echo "Error: symbol size must >= 4 (lib: $dest_library; sym: $symbol; size: $sym_size)!"
                exit -1;

            fi
            $pams_cmd --pfb -d $dest_library -s $src_library -o $dest_offset -r $src_offset -z 4

            if [[ $? -ne 0 ]]; then
                echo "Error: Pams return false!"
                exit -1;
            fi
        done < "$library_symbol"
    fi

    #
    # Return 0 on success
    exit 0
elif [[ $1 = "pst" ]]; then
    if [[ ! -f $library_symbol ]]; then
        echo "Error: symbol list ($library_symbol) does not exist!";
        exit -1;
    fi

    #
    # Copy original library to CWD
    library=`basename $library_original`
    cp $library_original .

    $objdump_cmd -T $library | grep "\.text" | awk '{print $NF}' > $library.tmp
    sym_size=`wc -c $library_symbol | awk '{print $1}'`
    if [[ $sym_size -ne 0 ]]; then
        awk 'NR==FNR{a[$1]=1} NR>FNR{if(a[$NF]!=1) print $1}' $library_symbol $library.tmp > $library.filt
    else
        cp $library.tmp $library.filt
    fi

    rm -rf $library.tmp
    dynamic=`$objdump_cmd -h $library | grep "\.dynamic" | awk '{print $6}'`

    #
    # Patch library
    while read line
    do
        $pams_cmd --pst -b $library -n 0x$dynamic -m $line
        if [[ $? -ne 0 ]]; then
            echo "Error: Pams return false!"
            exit -1;
        fi
    done<$library.filt

    #
    # Move patched library to intermediate folder
    rm -rf $library.filt
    mv $library $intermediate_path/$library

    #
    # Return 0 on success
    exit 0
fi
